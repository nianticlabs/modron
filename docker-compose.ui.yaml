services:
  modron_proxy:
    container_name: modron_proxy
    image: envoyproxy/envoy:v1.24-latest
    volumes:
      - ./docker/envoyproxy:/etc/envoy
    ports:
      - "8080:10000"
    networks:
      - modron
    depends_on:
      - modron_ui
      - modron_fake

  modron_fake:
    container_name: modron_fake
    build:
      context: .
      dockerfile: src/Dockerfile
    environment:
      RUN_AUTOMATED_SCANS: "false"
      COLLECTOR: "FAKE"
      DB_MAX_CONNECTIONS: "1"
      GRPC_TRACE: "all"
      GRPC_VERBOSITY: "DEBUG"
      LISTEN_ADDR: "0.0.0.0"
      ORG_ID: "111111111111"
      ORG_SUFFIX: "@example.com"
      PORT: 8080
      SQL_BACKEND_DRIVER: "postgres"
      SQL_CONNECT_STRING: "host=postgres_db port=5432 user=modron password=docker-test-password database=modron sslmode=disable"
      STORAGE: "SQL"
      TAG_CUSTOMER_DATA: 111111111111/customer_data
      TAG_EMPLOYEE_DATA: 111111111111/employee_data
      TAG_ENVIRONMENT: 111111111111/environment
    networks:
      - modron
    depends_on:
      postgres_db:
        condition: service_healthy

  modron_ui:
    container_name: modron_ui
    build:
      dockerfile: src/ui/Dockerfile
    environment:
      ENVIRONMENT: "E2E_TESTING"
      DIST_PATH: "./ui"
      PORT: 8080
    networks:
      - modron

  modron_test:
    container_name: modron_test
    build:
      context: .
      dockerfile: ./src/ui/client/Dockerfile.e2e
    depends_on:
      - modron_proxy
    environment:
      CYPRESS_BASE_URL: "http://modron_proxy:10000"
      ELECTRON_ENABLE_LOGGING: 1
    command: npx cypress run
    volumes:
      - ./src/ui/client/cypress:/app/cypress:ro
      - ./docker/cypress/tsconfig.json:/app/tsconfig.json
      - ./docker/cypress/cypress.config.ts:/app/cypress.config.ts
      - ./:/app/results
    networks:
      - modron

  postgres_db:
    container_name: postgres_db
    image: postgres:14-bookworm
    restart: always
    environment:
      POSTGRES_USER: "modron"
      POSTGRES_PASSWORD: "docker-test-password"
      POSTGRES_DB: "modron"
      PGDATA: "/tmp/"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U modron"]
      interval: 1s
      timeout: 2s
      retries: 5
    tmpfs:
      - /tmp
    networks:
      - modron

volumes:
  stats:
    external: false

networks:
  modron:
    driver: bridge
