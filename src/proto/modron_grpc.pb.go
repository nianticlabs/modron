// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModronServiceClient is the client API for ModronService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModronServiceClient interface {
	// Scanning a project is a long running operation. We don't expect the user
	// to get an instantanous result. Instead users will receive an ID to check
	// back later for results. We really want to use https://google.aip.dev/151
	// here, but it's quite an overhead for the first implementation. Performs a
	// collection, followed by a scan, on the requested resource groups
	CollectAndScan(ctx context.Context, in *CollectAndScanRequest, opts ...grpc.CallOption) (*CollectAndScanResponse, error)
	// List the latest observations resource groups
	ListObservations(ctx context.Context, in *ListObservationsRequest, opts ...grpc.CallOption) (*ListObservationsResponse, error)
	// CreateObservation is meant for creating new observation *linked with an
	// existing resource* into modron. This will fail if the resource doesn't
	// exist or can't be found.
	CreateObservation(ctx context.Context, in *CreateObservationRequest, opts ...grpc.CallOption) (*Observation, error)
	GetStatusCollectAndScan(ctx context.Context, in *GetStatusCollectAndScanRequest, opts ...grpc.CallOption) (*GetStatusCollectAndScanResponse, error)
}

type modronServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModronServiceClient(cc grpc.ClientConnInterface) ModronServiceClient {
	return &modronServiceClient{cc}
}

func (c *modronServiceClient) CollectAndScan(ctx context.Context, in *CollectAndScanRequest, opts ...grpc.CallOption) (*CollectAndScanResponse, error) {
	out := new(CollectAndScanResponse)
	err := c.cc.Invoke(ctx, "/ModronService/CollectAndScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modronServiceClient) ListObservations(ctx context.Context, in *ListObservationsRequest, opts ...grpc.CallOption) (*ListObservationsResponse, error) {
	out := new(ListObservationsResponse)
	err := c.cc.Invoke(ctx, "/ModronService/ListObservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modronServiceClient) CreateObservation(ctx context.Context, in *CreateObservationRequest, opts ...grpc.CallOption) (*Observation, error) {
	out := new(Observation)
	err := c.cc.Invoke(ctx, "/ModronService/CreateObservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modronServiceClient) GetStatusCollectAndScan(ctx context.Context, in *GetStatusCollectAndScanRequest, opts ...grpc.CallOption) (*GetStatusCollectAndScanResponse, error) {
	out := new(GetStatusCollectAndScanResponse)
	err := c.cc.Invoke(ctx, "/ModronService/GetStatusCollectAndScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModronServiceServer is the server API for ModronService service.
// All implementations must embed UnimplementedModronServiceServer
// for forward compatibility
type ModronServiceServer interface {
	// Scanning a project is a long running operation. We don't expect the user
	// to get an instantanous result. Instead users will receive an ID to check
	// back later for results. We really want to use https://google.aip.dev/151
	// here, but it's quite an overhead for the first implementation. Performs a
	// collection, followed by a scan, on the requested resource groups
	CollectAndScan(context.Context, *CollectAndScanRequest) (*CollectAndScanResponse, error)
	// List the latest observations resource groups
	ListObservations(context.Context, *ListObservationsRequest) (*ListObservationsResponse, error)
	// CreateObservation is meant for creating new observation *linked with an
	// existing resource* into modron. This will fail if the resource doesn't
	// exist or can't be found.
	CreateObservation(context.Context, *CreateObservationRequest) (*Observation, error)
	GetStatusCollectAndScan(context.Context, *GetStatusCollectAndScanRequest) (*GetStatusCollectAndScanResponse, error)
	mustEmbedUnimplementedModronServiceServer()
}

// UnimplementedModronServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModronServiceServer struct {
}

func (UnimplementedModronServiceServer) CollectAndScan(context.Context, *CollectAndScanRequest) (*CollectAndScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectAndScan not implemented")
}
func (UnimplementedModronServiceServer) ListObservations(context.Context, *ListObservationsRequest) (*ListObservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObservations not implemented")
}
func (UnimplementedModronServiceServer) CreateObservation(context.Context, *CreateObservationRequest) (*Observation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObservation not implemented")
}
func (UnimplementedModronServiceServer) GetStatusCollectAndScan(context.Context, *GetStatusCollectAndScanRequest) (*GetStatusCollectAndScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusCollectAndScan not implemented")
}
func (UnimplementedModronServiceServer) mustEmbedUnimplementedModronServiceServer() {}

// UnsafeModronServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModronServiceServer will
// result in compilation errors.
type UnsafeModronServiceServer interface {
	mustEmbedUnimplementedModronServiceServer()
}

func RegisterModronServiceServer(s grpc.ServiceRegistrar, srv ModronServiceServer) {
	s.RegisterService(&ModronService_ServiceDesc, srv)
}

func _ModronService_CollectAndScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectAndScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModronServiceServer).CollectAndScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ModronService/CollectAndScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModronServiceServer).CollectAndScan(ctx, req.(*CollectAndScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModronService_ListObservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModronServiceServer).ListObservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ModronService/ListObservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModronServiceServer).ListObservations(ctx, req.(*ListObservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModronService_CreateObservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModronServiceServer).CreateObservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ModronService/CreateObservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModronServiceServer).CreateObservation(ctx, req.(*CreateObservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModronService_GetStatusCollectAndScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusCollectAndScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModronServiceServer).GetStatusCollectAndScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ModronService/GetStatusCollectAndScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModronServiceServer).GetStatusCollectAndScan(ctx, req.(*GetStatusCollectAndScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModronService_ServiceDesc is the grpc.ServiceDesc for ModronService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModronService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ModronService",
	HandlerType: (*ModronServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectAndScan",
			Handler:    _ModronService_CollectAndScan_Handler,
		},
		{
			MethodName: "ListObservations",
			Handler:    _ModronService_ListObservations_Handler,
		},
		{
			MethodName: "CreateObservation",
			Handler:    _ModronService_CreateObservation_Handler,
		},
		{
			MethodName: "GetStatusCollectAndScan",
			Handler:    _ModronService_GetStatusCollectAndScan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modron.proto",
}
