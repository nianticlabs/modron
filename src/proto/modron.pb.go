// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.20.1
// source: modron.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestStatus int32

const (
	RequestStatus_UNKNOWN         RequestStatus = 0
	RequestStatus_DONE            RequestStatus = 1
	RequestStatus_RUNNING         RequestStatus = 2
	RequestStatus_ALREADY_RUNNING RequestStatus = 3
	RequestStatus_CANCELLED       RequestStatus = 4
)

// Enum value maps for RequestStatus.
var (
	RequestStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "DONE",
		2: "RUNNING",
		3: "ALREADY_RUNNING",
		4: "CANCELLED",
	}
	RequestStatus_value = map[string]int32{
		"UNKNOWN":         0,
		"DONE":            1,
		"RUNNING":         2,
		"ALREADY_RUNNING": 3,
		"CANCELLED":       4,
	}
)

func (x RequestStatus) Enum() *RequestStatus {
	p := new(RequestStatus)
	*p = x
	return p
}

func (x RequestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_modron_proto_enumTypes[0].Descriptor()
}

func (RequestStatus) Type() protoreflect.EnumType {
	return &file_modron_proto_enumTypes[0]
}

func (x RequestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestStatus.Descriptor instead.
func (RequestStatus) EnumDescriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{0}
}

type Database_EncryptionType int32

const (
	Database_ENCRYPTION_UNKNOWN      Database_EncryptionType = 0
	Database_INSECURE_CLEAR_TEXT     Database_EncryptionType = 1
	Database_ENCRYPTION_MANAGED      Database_EncryptionType = 2
	Database_ENCRYPTION_USER_MANAGED Database_EncryptionType = 3
)

// Enum value maps for Database_EncryptionType.
var (
	Database_EncryptionType_name = map[int32]string{
		0: "ENCRYPTION_UNKNOWN",
		1: "INSECURE_CLEAR_TEXT",
		2: "ENCRYPTION_MANAGED",
		3: "ENCRYPTION_USER_MANAGED",
	}
	Database_EncryptionType_value = map[string]int32{
		"ENCRYPTION_UNKNOWN":      0,
		"INSECURE_CLEAR_TEXT":     1,
		"ENCRYPTION_MANAGED":      2,
		"ENCRYPTION_USER_MANAGED": 3,
	}
)

func (x Database_EncryptionType) Enum() *Database_EncryptionType {
	p := new(Database_EncryptionType)
	*p = x
	return p
}

func (x Database_EncryptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Database_EncryptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_modron_proto_enumTypes[1].Descriptor()
}

func (Database_EncryptionType) Type() protoreflect.EnumType {
	return &file_modron_proto_enumTypes[1]
}

func (x Database_EncryptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Database_EncryptionType.Descriptor instead.
func (Database_EncryptionType) EnumDescriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{4, 0}
}

type Database_BackupConfiguration int32

const (
	Database_BACKUP_CONFIG_UNKNOWN  Database_BackupConfiguration = 0
	Database_BACKUP_CONFIG_DISABLED Database_BackupConfiguration = 1
	Database_BACKUP_CONFIG_MANAGED  Database_BackupConfiguration = 2
)

// Enum value maps for Database_BackupConfiguration.
var (
	Database_BackupConfiguration_name = map[int32]string{
		0: "BACKUP_CONFIG_UNKNOWN",
		1: "BACKUP_CONFIG_DISABLED",
		2: "BACKUP_CONFIG_MANAGED",
	}
	Database_BackupConfiguration_value = map[string]int32{
		"BACKUP_CONFIG_UNKNOWN":  0,
		"BACKUP_CONFIG_DISABLED": 1,
		"BACKUP_CONFIG_MANAGED":  2,
	}
)

func (x Database_BackupConfiguration) Enum() *Database_BackupConfiguration {
	p := new(Database_BackupConfiguration)
	*p = x
	return p
}

func (x Database_BackupConfiguration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Database_BackupConfiguration) Descriptor() protoreflect.EnumDescriptor {
	return file_modron_proto_enumTypes[2].Descriptor()
}

func (Database_BackupConfiguration) Type() protoreflect.EnumType {
	return &file_modron_proto_enumTypes[2]
}

func (x Database_BackupConfiguration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Database_BackupConfiguration.Descriptor instead.
func (Database_BackupConfiguration) EnumDescriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{4, 1}
}

type Database_PasswordPolicy int32

const (
	Database_PASSWORD_POLICY_UNKNOWN Database_PasswordPolicy = 0
	Database_PASSWORD_POLICY_WEAK    Database_PasswordPolicy = 1
	Database_PASSWORD_POLICY_STRONG  Database_PasswordPolicy = 2
)

// Enum value maps for Database_PasswordPolicy.
var (
	Database_PasswordPolicy_name = map[int32]string{
		0: "PASSWORD_POLICY_UNKNOWN",
		1: "PASSWORD_POLICY_WEAK",
		2: "PASSWORD_POLICY_STRONG",
	}
	Database_PasswordPolicy_value = map[string]int32{
		"PASSWORD_POLICY_UNKNOWN": 0,
		"PASSWORD_POLICY_WEAK":    1,
		"PASSWORD_POLICY_STRONG":  2,
	}
)

func (x Database_PasswordPolicy) Enum() *Database_PasswordPolicy {
	p := new(Database_PasswordPolicy)
	*p = x
	return p
}

func (x Database_PasswordPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Database_PasswordPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_modron_proto_enumTypes[3].Descriptor()
}

func (Database_PasswordPolicy) Type() protoreflect.EnumType {
	return &file_modron_proto_enumTypes[3]
}

func (x Database_PasswordPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Database_PasswordPolicy.Descriptor instead.
func (Database_PasswordPolicy) EnumDescriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{4, 2}
}

type Database_AuthorizedNetworks int32

const (
	Database_AUTHORIZED_NETWORKS_UNKNOWN Database_AuthorizedNetworks = 0
	Database_AUTHORIZED_NETWORKS_NOT_SET Database_AuthorizedNetworks = 1
	Database_AUTHORIZED_NETWORKS_SET     Database_AuthorizedNetworks = 2
)

// Enum value maps for Database_AuthorizedNetworks.
var (
	Database_AuthorizedNetworks_name = map[int32]string{
		0: "AUTHORIZED_NETWORKS_UNKNOWN",
		1: "AUTHORIZED_NETWORKS_NOT_SET",
		2: "AUTHORIZED_NETWORKS_SET",
	}
	Database_AuthorizedNetworks_value = map[string]int32{
		"AUTHORIZED_NETWORKS_UNKNOWN": 0,
		"AUTHORIZED_NETWORKS_NOT_SET": 1,
		"AUTHORIZED_NETWORKS_SET":     2,
	}
)

func (x Database_AuthorizedNetworks) Enum() *Database_AuthorizedNetworks {
	p := new(Database_AuthorizedNetworks)
	*p = x
	return p
}

func (x Database_AuthorizedNetworks) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Database_AuthorizedNetworks) Descriptor() protoreflect.EnumDescriptor {
	return file_modron_proto_enumTypes[4].Descriptor()
}

func (Database_AuthorizedNetworks) Type() protoreflect.EnumType {
	return &file_modron_proto_enumTypes[4]
}

func (x Database_AuthorizedNetworks) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Database_AuthorizedNetworks.Descriptor instead.
func (Database_AuthorizedNetworks) EnumDescriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{4, 3}
}

// Assuming: zone < region (within a [section] of a country) < global (across
// multiple countries or continents)
type Database_AvailabilityType int32

const (
	Database_HA_UNKNOWN  Database_AvailabilityType = 0
	Database_NO_HA       Database_AvailabilityType = 1
	Database_HA_ZONAL    Database_AvailabilityType = 2
	Database_HA_REGIONAL Database_AvailabilityType = 3
	Database_HA_GLOBAL   Database_AvailabilityType = 4
)

// Enum value maps for Database_AvailabilityType.
var (
	Database_AvailabilityType_name = map[int32]string{
		0: "HA_UNKNOWN",
		1: "NO_HA",
		2: "HA_ZONAL",
		3: "HA_REGIONAL",
		4: "HA_GLOBAL",
	}
	Database_AvailabilityType_value = map[string]int32{
		"HA_UNKNOWN":  0,
		"NO_HA":       1,
		"HA_ZONAL":    2,
		"HA_REGIONAL": 3,
		"HA_GLOBAL":   4,
	}
)

func (x Database_AvailabilityType) Enum() *Database_AvailabilityType {
	p := new(Database_AvailabilityType)
	*p = x
	return p
}

func (x Database_AvailabilityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Database_AvailabilityType) Descriptor() protoreflect.EnumDescriptor {
	return file_modron_proto_enumTypes[5].Descriptor()
}

func (Database_AvailabilityType) Type() protoreflect.EnumType {
	return &file_modron_proto_enumTypes[5]
}

func (x Database_AvailabilityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Database_AvailabilityType.Descriptor instead.
func (Database_AvailabilityType) EnumDescriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{4, 4}
}

type IamGroup_Member_Type int32

const (
	IamGroup_Member_MEMBER_TYPE_UNKNOWN         IamGroup_Member_Type = 0
	IamGroup_Member_MEMBER_TYPE_USER            IamGroup_Member_Type = 1
	IamGroup_Member_MEMBER_TYPE_SERVICE_ACCOUNT IamGroup_Member_Type = 2
	IamGroup_Member_MEMBER_TYPE_GROUP           IamGroup_Member_Type = 3
	IamGroup_Member_MEMBER_TYPE_SHARED_DRIVE    IamGroup_Member_Type = 4
	IamGroup_Member_MEMBER_TYPE_OTHER           IamGroup_Member_Type = 5
)

// Enum value maps for IamGroup_Member_Type.
var (
	IamGroup_Member_Type_name = map[int32]string{
		0: "MEMBER_TYPE_UNKNOWN",
		1: "MEMBER_TYPE_USER",
		2: "MEMBER_TYPE_SERVICE_ACCOUNT",
		3: "MEMBER_TYPE_GROUP",
		4: "MEMBER_TYPE_SHARED_DRIVE",
		5: "MEMBER_TYPE_OTHER",
	}
	IamGroup_Member_Type_value = map[string]int32{
		"MEMBER_TYPE_UNKNOWN":         0,
		"MEMBER_TYPE_USER":            1,
		"MEMBER_TYPE_SERVICE_ACCOUNT": 2,
		"MEMBER_TYPE_GROUP":           3,
		"MEMBER_TYPE_SHARED_DRIVE":    4,
		"MEMBER_TYPE_OTHER":           5,
	}
)

func (x IamGroup_Member_Type) Enum() *IamGroup_Member_Type {
	p := new(IamGroup_Member_Type)
	*p = x
	return p
}

func (x IamGroup_Member_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IamGroup_Member_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_modron_proto_enumTypes[6].Descriptor()
}

func (IamGroup_Member_Type) Type() protoreflect.EnumType {
	return &file_modron_proto_enumTypes[6]
}

func (x IamGroup_Member_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IamGroup_Member_Type.Descriptor instead.
func (IamGroup_Member_Type) EnumDescriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{5, 1, 0}
}

type IamGroup_Member_Role int32

const (
	IamGroup_Member_MEMBER_ROLE_UNKNOWN IamGroup_Member_Role = 0
	IamGroup_Member_MEMBER_ROLE_OWNER   IamGroup_Member_Role = 1
	IamGroup_Member_MEMBER_ROLE_MANAGER IamGroup_Member_Role = 2
	IamGroup_Member_MEMBER_ROLE_MEMBER  IamGroup_Member_Role = 3
)

// Enum value maps for IamGroup_Member_Role.
var (
	IamGroup_Member_Role_name = map[int32]string{
		0: "MEMBER_ROLE_UNKNOWN",
		1: "MEMBER_ROLE_OWNER",
		2: "MEMBER_ROLE_MANAGER",
		3: "MEMBER_ROLE_MEMBER",
	}
	IamGroup_Member_Role_value = map[string]int32{
		"MEMBER_ROLE_UNKNOWN": 0,
		"MEMBER_ROLE_OWNER":   1,
		"MEMBER_ROLE_MANAGER": 2,
		"MEMBER_ROLE_MEMBER":  3,
	}
)

func (x IamGroup_Member_Role) Enum() *IamGroup_Member_Role {
	p := new(IamGroup_Member_Role)
	*p = x
	return p
}

func (x IamGroup_Member_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IamGroup_Member_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_modron_proto_enumTypes[7].Descriptor()
}

func (IamGroup_Member_Role) Type() protoreflect.EnumType {
	return &file_modron_proto_enumTypes[7]
}

func (x IamGroup_Member_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IamGroup_Member_Role.Descriptor instead.
func (IamGroup_Member_Role) EnumDescriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{5, 1, 1}
}

type Bucket_AccessType int32

const (
	Bucket_ACCESS_UNKNOWN Bucket_AccessType = 0
	Bucket_PRIVATE        Bucket_AccessType = 1
	Bucket_PUBLIC         Bucket_AccessType = 2
)

// Enum value maps for Bucket_AccessType.
var (
	Bucket_AccessType_name = map[int32]string{
		0: "ACCESS_UNKNOWN",
		1: "PRIVATE",
		2: "PUBLIC",
	}
	Bucket_AccessType_value = map[string]int32{
		"ACCESS_UNKNOWN": 0,
		"PRIVATE":        1,
		"PUBLIC":         2,
	}
)

func (x Bucket_AccessType) Enum() *Bucket_AccessType {
	p := new(Bucket_AccessType)
	*p = x
	return p
}

func (x Bucket_AccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bucket_AccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_modron_proto_enumTypes[8].Descriptor()
}

func (Bucket_AccessType) Type() protoreflect.EnumType {
	return &file_modron_proto_enumTypes[8]
}

func (x Bucket_AccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bucket_AccessType.Descriptor instead.
func (Bucket_AccessType) EnumDescriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{6, 0}
}

type Bucket_AccessControlType int32

const (
	Bucket_ACCESS_CONTROL_UNKNOWN Bucket_AccessControlType = 0
	Bucket_NON_UNIFORM            Bucket_AccessControlType = 1
	Bucket_UNIFORM                Bucket_AccessControlType = 2
)

// Enum value maps for Bucket_AccessControlType.
var (
	Bucket_AccessControlType_name = map[int32]string{
		0: "ACCESS_CONTROL_UNKNOWN",
		1: "NON_UNIFORM",
		2: "UNIFORM",
	}
	Bucket_AccessControlType_value = map[string]int32{
		"ACCESS_CONTROL_UNKNOWN": 0,
		"NON_UNIFORM":            1,
		"UNIFORM":                2,
	}
)

func (x Bucket_AccessControlType) Enum() *Bucket_AccessControlType {
	p := new(Bucket_AccessControlType)
	*p = x
	return p
}

func (x Bucket_AccessControlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bucket_AccessControlType) Descriptor() protoreflect.EnumDescriptor {
	return file_modron_proto_enumTypes[9].Descriptor()
}

func (Bucket_AccessControlType) Type() protoreflect.EnumType {
	return &file_modron_proto_enumTypes[9]
}

func (x Bucket_AccessControlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bucket_AccessControlType.Descriptor instead.
func (Bucket_AccessControlType) EnumDescriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{6, 1}
}

type SslPolicy_MinTlsVersion int32

const (
	SslPolicy_MinTlsVersion_UNKNOWN SslPolicy_MinTlsVersion = 0
	SslPolicy_TLS_1_0               SslPolicy_MinTlsVersion = 1
	SslPolicy_TLS_1_1               SslPolicy_MinTlsVersion = 2
	SslPolicy_TLS_1_2               SslPolicy_MinTlsVersion = 3
	SslPolicy_TLS_1_3               SslPolicy_MinTlsVersion = 4
)

// Enum value maps for SslPolicy_MinTlsVersion.
var (
	SslPolicy_MinTlsVersion_name = map[int32]string{
		0: "MinTlsVersion_UNKNOWN",
		1: "TLS_1_0",
		2: "TLS_1_1",
		3: "TLS_1_2",
		4: "TLS_1_3",
	}
	SslPolicy_MinTlsVersion_value = map[string]int32{
		"MinTlsVersion_UNKNOWN": 0,
		"TLS_1_0":               1,
		"TLS_1_1":               2,
		"TLS_1_2":               3,
		"TLS_1_3":               4,
	}
)

func (x SslPolicy_MinTlsVersion) Enum() *SslPolicy_MinTlsVersion {
	p := new(SslPolicy_MinTlsVersion)
	*p = x
	return p
}

func (x SslPolicy_MinTlsVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SslPolicy_MinTlsVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_modron_proto_enumTypes[10].Descriptor()
}

func (SslPolicy_MinTlsVersion) Type() protoreflect.EnumType {
	return &file_modron_proto_enumTypes[10]
}

func (x SslPolicy_MinTlsVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SslPolicy_MinTlsVersion.Descriptor instead.
func (SslPolicy_MinTlsVersion) EnumDescriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{10, 0}
}

type SslPolicy_Profile int32

const (
	SslPolicy_Profile_UNKNOWN SslPolicy_Profile = 0
	SslPolicy_COMPATIBLE      SslPolicy_Profile = 1
	SslPolicy_MODERN          SslPolicy_Profile = 2
	SslPolicy_RESTRICTED      SslPolicy_Profile = 3
	SslPolicy_CUSTOM          SslPolicy_Profile = 4
)

// Enum value maps for SslPolicy_Profile.
var (
	SslPolicy_Profile_name = map[int32]string{
		0: "Profile_UNKNOWN",
		1: "COMPATIBLE",
		2: "MODERN",
		3: "RESTRICTED",
		4: "CUSTOM",
	}
	SslPolicy_Profile_value = map[string]int32{
		"Profile_UNKNOWN": 0,
		"COMPATIBLE":      1,
		"MODERN":          2,
		"RESTRICTED":      3,
		"CUSTOM":          4,
	}
)

func (x SslPolicy_Profile) Enum() *SslPolicy_Profile {
	p := new(SslPolicy_Profile)
	*p = x
	return p
}

func (x SslPolicy_Profile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SslPolicy_Profile) Descriptor() protoreflect.EnumDescriptor {
	return file_modron_proto_enumTypes[11].Descriptor()
}

func (SslPolicy_Profile) Type() protoreflect.EnumType {
	return &file_modron_proto_enumTypes[11]
}

func (x SslPolicy_Profile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SslPolicy_Profile.Descriptor instead.
func (SslPolicy_Profile) EnumDescriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{10, 1}
}

type LoadBalancer_Type int32

const (
	LoadBalancer_UNKNOWN_TYPE LoadBalancer_Type = 0
	// An external load balancer exposes internal resources on the internet.
	LoadBalancer_EXTERNAL LoadBalancer_Type = 1
	LoadBalancer_INTERNAL LoadBalancer_Type = 2
)

// Enum value maps for LoadBalancer_Type.
var (
	LoadBalancer_Type_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "EXTERNAL",
		2: "INTERNAL",
	}
	LoadBalancer_Type_value = map[string]int32{
		"UNKNOWN_TYPE": 0,
		"EXTERNAL":     1,
		"INTERNAL":     2,
	}
)

func (x LoadBalancer_Type) Enum() *LoadBalancer_Type {
	p := new(LoadBalancer_Type)
	*p = x
	return p
}

func (x LoadBalancer_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadBalancer_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_modron_proto_enumTypes[12].Descriptor()
}

func (LoadBalancer_Type) Type() protoreflect.EnumType {
	return &file_modron_proto_enumTypes[12]
}

func (x LoadBalancer_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadBalancer_Type.Descriptor instead.
func (LoadBalancer_Type) EnumDescriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{13, 0}
}

type Certificate_Type int32

const (
	Certificate_UNKNOWN Certificate_Type = 0
	// Certificate managed by the user and imported into the platform.
	Certificate_IMPORTED Certificate_Type = 1
	// Certificate managed by the platform.
	Certificate_MANAGED Certificate_Type = 2
)

// Enum value maps for Certificate_Type.
var (
	Certificate_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "IMPORTED",
		2: "MANAGED",
	}
	Certificate_Type_value = map[string]int32{
		"UNKNOWN":  0,
		"IMPORTED": 1,
		"MANAGED":  2,
	}
)

func (x Certificate_Type) Enum() *Certificate_Type {
	p := new(Certificate_Type)
	*p = x
	return p
}

func (x Certificate_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Certificate_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_modron_proto_enumTypes[13].Descriptor()
}

func (Certificate_Type) Type() protoreflect.EnumType {
	return &file_modron_proto_enumTypes[13]
}

func (x Certificate_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Certificate_Type.Descriptor instead.
func (Certificate_Type) EnumDescriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{14, 0}
}

type ExportedCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationDate   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	LastUsage      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_usage,json=lastUsage,proto3" json:"last_usage,omitempty"`
}

func (x *ExportedCredentials) Reset() {
	*x = ExportedCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportedCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportedCredentials) ProtoMessage() {}

func (x *ExportedCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportedCredentials.ProtoReflect.Descriptor instead.
func (*ExportedCredentials) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{0}
}

func (x *ExportedCredentials) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *ExportedCredentials) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *ExportedCredentials) GetLastUsage() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUsage
	}
	return nil
}

type VmInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicIp  string `protobuf:"bytes,1,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
	PrivateIp string `protobuf:"bytes,2,opt,name=private_ip,json=privateIp,proto3" json:"private_ip,omitempty"`
	// ServiceAccount.Name
	Identity string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (x *VmInstance) Reset() {
	*x = VmInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmInstance) ProtoMessage() {}

func (x *VmInstance) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmInstance.ProtoReflect.Descriptor instead.
func (*VmInstance) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{1}
}

func (x *VmInstance) GetPublicIp() string {
	if x != nil {
		return x.PublicIp
	}
	return ""
}

func (x *VmInstance) GetPrivateIp() string {
	if x != nil {
		return x.PrivateIp
	}
	return ""
}

func (x *VmInstance) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ips                      []string `protobuf:"bytes,1,rep,name=ips,proto3" json:"ips,omitempty"`
	GcpPrivateGoogleAccessV4 bool     `protobuf:"varint,2,opt,name=gcp_private_google_access_v4,json=gcpPrivateGoogleAccessV4,proto3" json:"gcp_private_google_access_v4,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{2}
}

func (x *Network) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *Network) GetGcpPrivateGoogleAccessV4() bool {
	if x != nil {
		return x.GcpPrivateGoogleAccessV4
	}
	return false
}

type KubernetesCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasterAuthorizedNetworks []string `protobuf:"bytes,1,rep,name=master_authorized_networks,json=masterAuthorizedNetworks,proto3" json:"master_authorized_networks,omitempty"`
	PrivateCluster           bool     `protobuf:"varint,2,opt,name=private_cluster,json=privateCluster,proto3" json:"private_cluster,omitempty"`
	MasterVersion            string   `protobuf:"bytes,3,opt,name=master_version,json=masterVersion,proto3" json:"master_version,omitempty"`
	NodesVersion             string   `protobuf:"bytes,4,opt,name=nodes_version,json=nodesVersion,proto3" json:"nodes_version,omitempty"`
	Location                 string   `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *KubernetesCluster) Reset() {
	*x = KubernetesCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesCluster) ProtoMessage() {}

func (x *KubernetesCluster) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesCluster.ProtoReflect.Descriptor instead.
func (*KubernetesCluster) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{3}
}

func (x *KubernetesCluster) GetMasterAuthorizedNetworks() []string {
	if x != nil {
		return x.MasterAuthorizedNetworks
	}
	return nil
}

func (x *KubernetesCluster) GetPrivateCluster() bool {
	if x != nil {
		return x.PrivateCluster
	}
	return false
}

func (x *KubernetesCluster) GetMasterVersion() string {
	if x != nil {
		return x.MasterVersion
	}
	return ""
}

func (x *KubernetesCluster) GetNodesVersion() string {
	if x != nil {
		return x.NodesVersion
	}
	return ""
}

func (x *KubernetesCluster) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                               string                       `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Version                            string                       `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Encryption                         Database_EncryptionType      `protobuf:"varint,3,opt,name=encryption,proto3,enum=Database_EncryptionType" json:"encryption,omitempty"`
	Address                            string                       `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	AutoResize                         bool                         `protobuf:"varint,5,opt,name=auto_resize,json=autoResize,proto3" json:"auto_resize,omitempty"`
	BackupConfig                       Database_BackupConfiguration `protobuf:"varint,6,opt,name=backup_config,json=backupConfig,proto3,enum=Database_BackupConfiguration" json:"backup_config,omitempty"`
	PasswordPolicy                     Database_PasswordPolicy      `protobuf:"varint,7,opt,name=password_policy,json=passwordPolicy,proto3,enum=Database_PasswordPolicy" json:"password_policy,omitempty"`
	TlsRequired                        bool                         `protobuf:"varint,8,opt,name=tls_required,json=tlsRequired,proto3" json:"tls_required,omitempty"`
	AuthorizedNetworksSettingAvailable Database_AuthorizedNetworks  `protobuf:"varint,9,opt,name=authorized_networks_setting_available,json=authorizedNetworksSettingAvailable,proto3,enum=Database_AuthorizedNetworks" json:"authorized_networks_setting_available,omitempty"`
	AuthorizedNetworks                 []string                     `protobuf:"bytes,10,rep,name=authorized_networks,json=authorizedNetworks,proto3" json:"authorized_networks,omitempty"`
	AvailabilityType                   Database_AvailabilityType    `protobuf:"varint,11,opt,name=availability_type,json=availabilityType,proto3,enum=Database_AvailabilityType" json:"availability_type,omitempty"`
	IsPublic                           bool                         `protobuf:"varint,12,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *Database) Reset() {
	*x = Database{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{4}
}

func (x *Database) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Database) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Database) GetEncryption() Database_EncryptionType {
	if x != nil {
		return x.Encryption
	}
	return Database_ENCRYPTION_UNKNOWN
}

func (x *Database) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Database) GetAutoResize() bool {
	if x != nil {
		return x.AutoResize
	}
	return false
}

func (x *Database) GetBackupConfig() Database_BackupConfiguration {
	if x != nil {
		return x.BackupConfig
	}
	return Database_BACKUP_CONFIG_UNKNOWN
}

func (x *Database) GetPasswordPolicy() Database_PasswordPolicy {
	if x != nil {
		return x.PasswordPolicy
	}
	return Database_PASSWORD_POLICY_UNKNOWN
}

func (x *Database) GetTlsRequired() bool {
	if x != nil {
		return x.TlsRequired
	}
	return false
}

func (x *Database) GetAuthorizedNetworksSettingAvailable() Database_AuthorizedNetworks {
	if x != nil {
		return x.AuthorizedNetworksSettingAvailable
	}
	return Database_AUTHORIZED_NETWORKS_UNKNOWN
}

func (x *Database) GetAuthorizedNetworks() []string {
	if x != nil {
		return x.AuthorizedNetworks
	}
	return nil
}

func (x *Database) GetAvailabilityType() Database_AvailabilityType {
	if x != nil {
		return x.AvailabilityType
	}
	return Database_HA_UNKNOWN
}

func (x *Database) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type IamGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName          string                         `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description          string                         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Key                  *IamGroup_EntityKey            `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Parent               string                         `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	CreationDate         *timestamppb.Timestamp         `protobuf:"bytes,6,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	UpdateDate           *timestamppb.Timestamp         `protobuf:"bytes,7,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
	Member               []*IamGroup_Member             `protobuf:"bytes,8,rep,name=member,proto3" json:"member,omitempty"`
	DynamicGroupMetadata *IamGroup_DynamicGroupMetadata `protobuf:"bytes,9,opt,name=dynamic_group_metadata,json=dynamicGroupMetadata,proto3,oneof" json:"dynamic_group_metadata,omitempty"`
}

func (x *IamGroup) Reset() {
	*x = IamGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamGroup) ProtoMessage() {}

func (x *IamGroup) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamGroup.ProtoReflect.Descriptor instead.
func (*IamGroup) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{5}
}

func (x *IamGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IamGroup) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *IamGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IamGroup) GetKey() *IamGroup_EntityKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *IamGroup) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *IamGroup) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *IamGroup) GetUpdateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateDate
	}
	return nil
}

func (x *IamGroup) GetMember() []*IamGroup_Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *IamGroup) GetDynamicGroupMetadata() *IamGroup_DynamicGroupMetadata {
	if x != nil {
		return x.DynamicGroupMetadata
	}
	return nil
}

// TODO: Consider adding the following:
// - Object versioning policy
type Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	// The retention policy for objects in the bucket.
	RetentionPolicy *Bucket_RetentionPolicy `protobuf:"bytes,2,opt,name=retention_policy,json=retentionPolicy,proto3,oneof" json:"retention_policy,omitempty"`
	// The SSE policy for the bucket.
	EncryptionPolicy *Bucket_EncryptionPolicy `protobuf:"bytes,3,opt,name=encryption_policy,json=encryptionPolicy,proto3,oneof" json:"encryption_policy,omitempty"`
	// If true, the bucket is publicly accessible.
	AccessType Bucket_AccessType `protobuf:"varint,4,opt,name=access_type,json=accessType,proto3,enum=Bucket_AccessType" json:"access_type,omitempty"`
	// If true, Access Control Lists (ACLs) are enabled for the bucket. In GCP,
	// this entails that uniform bucket-level access is disabled.
	AccessControlType Bucket_AccessControlType `protobuf:"varint,5,opt,name=access_control_type,json=accessControlType,proto3,enum=Bucket_AccessControlType" json:"access_control_type,omitempty"`
}

func (x *Bucket) Reset() {
	*x = Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bucket) ProtoMessage() {}

func (x *Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bucket.ProtoReflect.Descriptor instead.
func (*Bucket) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{6}
}

func (x *Bucket) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *Bucket) GetRetentionPolicy() *Bucket_RetentionPolicy {
	if x != nil {
		return x.RetentionPolicy
	}
	return nil
}

func (x *Bucket) GetEncryptionPolicy() *Bucket_EncryptionPolicy {
	if x != nil {
		return x.EncryptionPolicy
	}
	return nil
}

func (x *Bucket) GetAccessType() Bucket_AccessType {
	if x != nil {
		return x.AccessType
	}
	return Bucket_ACCESS_UNKNOWN
}

func (x *Bucket) GetAccessControlType() Bucket_AccessControlType {
	if x != nil {
		return x.AccessControlType
	}
	return Bucket_ACCESS_CONTROL_UNKNOWN
}

type APIKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes []string `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *APIKey) Reset() {
	*x = APIKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIKey) ProtoMessage() {}

func (x *APIKey) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIKey.ProtoReflect.Descriptor instead.
func (*APIKey) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{7}
}

func (x *APIKey) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role       string   `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Principals []string `protobuf:"bytes,2,rep,name=principals,proto3" json:"principals,omitempty"`
}

func (x *Permission) Reset() {
	*x = Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{8}
}

func (x *Permission) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Permission) GetPrincipals() []string {
	if x != nil {
		return x.Principals
	}
	return nil
}

type IamPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource this IAM policy is attached to.
	Resource    *Resource     `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Permissions []*Permission `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *IamPolicy) Reset() {
	*x = IamPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamPolicy) ProtoMessage() {}

func (x *IamPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamPolicy.ProtoReflect.Descriptor instead.
func (*IamPolicy) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{9}
}

func (x *IamPolicy) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *IamPolicy) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type SslPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationDate    *timestamppb.Timestamp  `protobuf:"bytes,1,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	Name            string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Profile         SslPolicy_Profile       `protobuf:"varint,3,opt,name=profile,proto3,enum=SslPolicy_Profile" json:"profile,omitempty"`
	MinTlsVersion   SslPolicy_MinTlsVersion `protobuf:"varint,4,opt,name=minTlsVersion,proto3,enum=SslPolicy_MinTlsVersion" json:"minTlsVersion,omitempty"`
	EnabledFeatures []string                `protobuf:"bytes,5,rep,name=enabledFeatures,proto3" json:"enabledFeatures,omitempty"`
	CustomFeatures  []string                `protobuf:"bytes,6,rep,name=customFeatures,proto3" json:"customFeatures,omitempty"`
}

func (x *SslPolicy) Reset() {
	*x = SslPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SslPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SslPolicy) ProtoMessage() {}

func (x *SslPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SslPolicy.ProtoReflect.Descriptor instead.
func (*SslPolicy) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{10}
}

func (x *SslPolicy) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *SslPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SslPolicy) GetProfile() SslPolicy_Profile {
	if x != nil {
		return x.Profile
	}
	return SslPolicy_Profile_UNKNOWN
}

func (x *SslPolicy) GetMinTlsVersion() SslPolicy_MinTlsVersion {
	if x != nil {
		return x.MinTlsVersion
	}
	return SslPolicy_MinTlsVersion_UNKNOWN
}

func (x *SslPolicy) GetEnabledFeatures() []string {
	if x != nil {
		return x.EnabledFeatures
	}
	return nil
}

func (x *SslPolicy) GetCustomFeatures() []string {
	if x != nil {
		return x.CustomFeatures
	}
	return nil
}

type ServiceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExportedCredentials []*ExportedCredentials `protobuf:"bytes,1,rep,name=exported_credentials,json=exportedCredentials,proto3" json:"exported_credentials,omitempty"`
}

func (x *ServiceAccount) Reset() {
	*x = ServiceAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAccount) ProtoMessage() {}

func (x *ServiceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAccount.ProtoReflect.Descriptor instead.
func (*ServiceAccount) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{11}
}

func (x *ServiceAccount) GetExportedCredentials() []*ExportedCredentials {
	if x != nil {
		return x.ExportedCredentials
	}
	return nil
}

// ResourceGroup designates the smallest administrative grouping of resources.
type ResourceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Environment describes the environment of this resource group. For instance
	// prod, dev, etc.
	Environment string `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
	// Number describes an ID used by the platform to identify the Resource Group.
	// In GCP this is the project number.
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *ResourceGroup) Reset() {
	*x = ResourceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceGroup) ProtoMessage() {}

func (x *ResourceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceGroup.ProtoReflect.Descriptor instead.
func (*ResourceGroup) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{12}
}

func (x *ResourceGroup) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *ResourceGroup) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type LoadBalancer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         LoadBalancer_Type `protobuf:"varint,1,opt,name=type,proto3,enum=LoadBalancer_Type" json:"type,omitempty"`
	Certificates []*Certificate    `protobuf:"bytes,2,rep,name=certificates,proto3" json:"certificates,omitempty"`
	SslPolicy    *SslPolicy        `protobuf:"bytes,3,opt,name=sslPolicy,proto3" json:"sslPolicy,omitempty"`
}

func (x *LoadBalancer) Reset() {
	*x = LoadBalancer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancer) ProtoMessage() {}

func (x *LoadBalancer) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancer.ProtoReflect.Descriptor instead.
func (*LoadBalancer) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{13}
}

func (x *LoadBalancer) GetType() LoadBalancer_Type {
	if x != nil {
		return x.Type
	}
	return LoadBalancer_UNKNOWN_TYPE
}

func (x *LoadBalancer) GetCertificates() []*Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *LoadBalancer) GetSslPolicy() *SslPolicy {
	if x != nil {
		return x.SslPolicy
	}
	return nil
}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Certificate_Type `protobuf:"varint,1,opt,name=type,proto3,enum=Certificate_Type" json:"type,omitempty"`
	// Fully-qualified domain name bound to the certificate.
	DomainName string `protobuf:"bytes,2,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	// The list of alternative domain names bound to the certificate.
	// See https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.6.
	SubjectAlternativeNames []string               `protobuf:"bytes,3,rep,name=subject_alternative_names,json=subjectAlternativeNames,proto3" json:"subject_alternative_names,omitempty"`
	CreationDate            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	ExpirationDate          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// The name of the certificate authority that issued the certificate.
	Issuer string `protobuf:"bytes,6,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// The algorithm that was used by the issuer to sign the certificate.
	SignatureAlgorithm string `protobuf:"bytes,7,opt,name=signature_algorithm,json=signatureAlgorithm,proto3" json:"signature_algorithm,omitempty"`
	// The chain starts with the leaf certificate and continues with the
	// remaining endorsing certificates in the chain of trust, if any.
	// See https://datatracker.ietf.org/doc/html/rfc1421.html.
	PemCertificateChain string `protobuf:"bytes,8,opt,name=pem_certificate_chain,json=pemCertificateChain,proto3" json:"pem_certificate_chain,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{14}
}

func (x *Certificate) GetType() Certificate_Type {
	if x != nil {
		return x.Type
	}
	return Certificate_UNKNOWN
}

func (x *Certificate) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *Certificate) GetSubjectAlternativeNames() []string {
	if x != nil {
		return x.SubjectAlternativeNames
	}
	return nil
}

func (x *Certificate) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *Certificate) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Certificate) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Certificate) GetSignatureAlgorithm() string {
	if x != nil {
		return x.SignatureAlgorithm
	}
	return ""
}

func (x *Certificate) GetPemCertificateChain() string {
	if x != nil {
		return x.PemCertificateChain
	}
	return ""
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the resource as given by Modron
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// Unique identifier of the collection run associated with the resource
	CollectionUid string `protobuf:"bytes,2,opt,name=collection_uid,json=collectionUid,proto3" json:"collection_uid,omitempty"`
	// collection timestamp
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// human readable name
	DisplayName string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// link to the platform resource
	Link string `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	// provider uid concatenated with the resource human readable name
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// The name of the immediate parent resource.
	Parent string `protobuf:"bytes,7,opt,name=parent,proto3" json:"parent,omitempty"`
	// The name of the resource group the resource is in
	ResourceGroupName string `protobuf:"bytes,8,opt,name=resource_group_name,json=resourceGroupName,proto3" json:"resource_group_name,omitempty"`
	// IamPolicy describes the IAM policy associated with that resource.
	IamPolicy *IamPolicy `protobuf:"bytes,9,opt,name=iam_policy,json=iamPolicy,proto3" json:"iam_policy,omitempty"`
	// Types should be generic enough that they can match types of different cloud
	// providers.
	//
	// Types that are assignable to Type:
	//
	//	*Resource_VmInstance
	//	*Resource_Network
	//	*Resource_KubernetesCluster
	//	*Resource_ServiceAccount
	//	*Resource_LoadBalancer
	//	*Resource_ResourceGroup
	//	*Resource_ExportedCredentials
	//	*Resource_ApiKey
	//	*Resource_Bucket
	//	*Resource_Certificate
	//	*Resource_Database
	//	*Resource_Group
	Type isResource_Type `protobuf_oneof:"type"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{15}
}

func (x *Resource) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Resource) GetCollectionUid() string {
	if x != nil {
		return x.CollectionUid
	}
	return ""
}

func (x *Resource) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Resource) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Resource) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Resource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Resource) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *Resource) GetResourceGroupName() string {
	if x != nil {
		return x.ResourceGroupName
	}
	return ""
}

func (x *Resource) GetIamPolicy() *IamPolicy {
	if x != nil {
		return x.IamPolicy
	}
	return nil
}

func (m *Resource) GetType() isResource_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Resource) GetVmInstance() *VmInstance {
	if x, ok := x.GetType().(*Resource_VmInstance); ok {
		return x.VmInstance
	}
	return nil
}

func (x *Resource) GetNetwork() *Network {
	if x, ok := x.GetType().(*Resource_Network); ok {
		return x.Network
	}
	return nil
}

func (x *Resource) GetKubernetesCluster() *KubernetesCluster {
	if x, ok := x.GetType().(*Resource_KubernetesCluster); ok {
		return x.KubernetesCluster
	}
	return nil
}

func (x *Resource) GetServiceAccount() *ServiceAccount {
	if x, ok := x.GetType().(*Resource_ServiceAccount); ok {
		return x.ServiceAccount
	}
	return nil
}

func (x *Resource) GetLoadBalancer() *LoadBalancer {
	if x, ok := x.GetType().(*Resource_LoadBalancer); ok {
		return x.LoadBalancer
	}
	return nil
}

func (x *Resource) GetResourceGroup() *ResourceGroup {
	if x, ok := x.GetType().(*Resource_ResourceGroup); ok {
		return x.ResourceGroup
	}
	return nil
}

func (x *Resource) GetExportedCredentials() *ExportedCredentials {
	if x, ok := x.GetType().(*Resource_ExportedCredentials); ok {
		return x.ExportedCredentials
	}
	return nil
}

func (x *Resource) GetApiKey() *APIKey {
	if x, ok := x.GetType().(*Resource_ApiKey); ok {
		return x.ApiKey
	}
	return nil
}

func (x *Resource) GetBucket() *Bucket {
	if x, ok := x.GetType().(*Resource_Bucket); ok {
		return x.Bucket
	}
	return nil
}

func (x *Resource) GetCertificate() *Certificate {
	if x, ok := x.GetType().(*Resource_Certificate); ok {
		return x.Certificate
	}
	return nil
}

func (x *Resource) GetDatabase() *Database {
	if x, ok := x.GetType().(*Resource_Database); ok {
		return x.Database
	}
	return nil
}

func (x *Resource) GetGroup() *IamGroup {
	if x, ok := x.GetType().(*Resource_Group); ok {
		return x.Group
	}
	return nil
}

type isResource_Type interface {
	isResource_Type()
}

type Resource_VmInstance struct {
	VmInstance *VmInstance `protobuf:"bytes,100,opt,name=vm_instance,json=vmInstance,proto3,oneof"`
}

type Resource_Network struct {
	Network *Network `protobuf:"bytes,101,opt,name=network,proto3,oneof"`
}

type Resource_KubernetesCluster struct {
	KubernetesCluster *KubernetesCluster `protobuf:"bytes,102,opt,name=kubernetes_cluster,json=kubernetesCluster,proto3,oneof"`
}

type Resource_ServiceAccount struct {
	ServiceAccount *ServiceAccount `protobuf:"bytes,103,opt,name=service_account,json=serviceAccount,proto3,oneof"`
}

type Resource_LoadBalancer struct {
	LoadBalancer *LoadBalancer `protobuf:"bytes,104,opt,name=load_balancer,json=loadBalancer,proto3,oneof"`
}

type Resource_ResourceGroup struct {
	ResourceGroup *ResourceGroup `protobuf:"bytes,105,opt,name=resource_group,json=resourceGroup,proto3,oneof"`
}

type Resource_ExportedCredentials struct {
	ExportedCredentials *ExportedCredentials `protobuf:"bytes,106,opt,name=exported_credentials,json=exportedCredentials,proto3,oneof"`
}

type Resource_ApiKey struct {
	ApiKey *APIKey `protobuf:"bytes,107,opt,name=api_key,json=apiKey,proto3,oneof"`
}

type Resource_Bucket struct {
	Bucket *Bucket `protobuf:"bytes,108,opt,name=bucket,proto3,oneof"`
}

type Resource_Certificate struct {
	Certificate *Certificate `protobuf:"bytes,109,opt,name=certificate,proto3,oneof"`
}

type Resource_Database struct {
	Database *Database `protobuf:"bytes,110,opt,name=database,proto3,oneof"`
}

type Resource_Group struct {
	Group *IamGroup `protobuf:"bytes,111,opt,name=group,proto3,oneof"`
}

func (*Resource_VmInstance) isResource_Type() {}

func (*Resource_Network) isResource_Type() {}

func (*Resource_KubernetesCluster) isResource_Type() {}

func (*Resource_ServiceAccount) isResource_Type() {}

func (*Resource_LoadBalancer) isResource_Type() {}

func (*Resource_ResourceGroup) isResource_Type() {}

func (*Resource_ExportedCredentials) isResource_Type() {}

func (*Resource_ApiKey) isResource_Type() {}

func (*Resource_Bucket) isResource_Type() {}

func (*Resource_Certificate) isResource_Type() {}

func (*Resource_Database) isResource_Type() {}

func (*Resource_Group) isResource_Type() {}

type Remediation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description    string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Recommendation string `protobuf:"bytes,2,opt,name=recommendation,proto3" json:"recommendation,omitempty"`
}

func (x *Remediation) Reset() {
	*x = Remediation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Remediation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Remediation) ProtoMessage() {}

func (x *Remediation) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Remediation.ProtoReflect.Descriptor instead.
func (*Remediation) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{16}
}

func (x *Remediation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Remediation) GetRecommendation() string {
	if x != nil {
		return x.Recommendation
	}
	return ""
}

type Observation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ScanUid   string                 `protobuf:"bytes,2,opt,name=scan_uid,json=scanUid,proto3" json:"scan_uid,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Resource  *Resource              `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
	// Human readable name of the observation.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Value found in the configuration that causes the issue.
	ExpectedValue *structpb.Value `protobuf:"bytes,6,opt,name=expected_value,json=expectedValue,proto3" json:"expected_value,omitempty"`
	ObservedValue *structpb.Value `protobuf:"bytes,7,opt,name=observed_value,json=observedValue,proto3" json:"observed_value,omitempty"`
	Remediation   *Remediation    `protobuf:"bytes,8,opt,name=remediation,proto3" json:"remediation,omitempty"`
}

func (x *Observation) Reset() {
	*x = Observation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation) ProtoMessage() {}

func (x *Observation) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation.ProtoReflect.Descriptor instead.
func (*Observation) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{17}
}

func (x *Observation) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Observation) GetScanUid() string {
	if x != nil {
		return x.ScanUid
	}
	return ""
}

func (x *Observation) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Observation) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Observation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Observation) GetExpectedValue() *structpb.Value {
	if x != nil {
		return x.ExpectedValue
	}
	return nil
}

func (x *Observation) GetObservedValue() *structpb.Value {
	if x != nil {
		return x.ObservedValue
	}
	return nil
}

func (x *Observation) GetRemediation() *Remediation {
	if x != nil {
		return x.Remediation
	}
	return nil
}

type ScanResultsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Observations []*Observation `protobuf:"bytes,1,rep,name=observations,proto3" json:"observations,omitempty"`
}

func (x *ScanResultsList) Reset() {
	*x = ScanResultsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanResultsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanResultsList) ProtoMessage() {}

func (x *ScanResultsList) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanResultsList.ProtoReflect.Descriptor instead.
func (*ScanResultsList) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{18}
}

func (x *ScanResultsList) GetObservations() []*Observation {
	if x != nil {
		return x.Observations
	}
	return nil
}

type GetStatusCollectAndScanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectStatus RequestStatus `protobuf:"varint,1,opt,name=collect_status,json=collectStatus,proto3,enum=RequestStatus" json:"collect_status,omitempty"`
	ScanStatus    RequestStatus `protobuf:"varint,2,opt,name=scan_status,json=scanStatus,proto3,enum=RequestStatus" json:"scan_status,omitempty"`
}

func (x *GetStatusCollectAndScanResponse) Reset() {
	*x = GetStatusCollectAndScanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusCollectAndScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusCollectAndScanResponse) ProtoMessage() {}

func (x *GetStatusCollectAndScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusCollectAndScanResponse.ProtoReflect.Descriptor instead.
func (*GetStatusCollectAndScanResponse) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{19}
}

func (x *GetStatusCollectAndScanResponse) GetCollectStatus() RequestStatus {
	if x != nil {
		return x.CollectStatus
	}
	return RequestStatus_UNKNOWN
}

func (x *GetStatusCollectAndScanResponse) GetScanStatus() RequestStatus {
	if x != nil {
		return x.ScanStatus
	}
	return RequestStatus_UNKNOWN
}

type GetStatusCollectAndScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectId string `protobuf:"bytes,1,opt,name=collect_id,json=collectId,proto3" json:"collect_id,omitempty"`
	ScanId    string `protobuf:"bytes,2,opt,name=scan_id,json=scanId,proto3" json:"scan_id,omitempty"`
}

func (x *GetStatusCollectAndScanRequest) Reset() {
	*x = GetStatusCollectAndScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusCollectAndScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusCollectAndScanRequest) ProtoMessage() {}

func (x *GetStatusCollectAndScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusCollectAndScanRequest.ProtoReflect.Descriptor instead.
func (*GetStatusCollectAndScanRequest) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{20}
}

func (x *GetStatusCollectAndScanRequest) GetCollectId() string {
	if x != nil {
		return x.CollectId
	}
	return ""
}

func (x *GetStatusCollectAndScanRequest) GetScanId() string {
	if x != nil {
		return x.ScanId
	}
	return ""
}

type CollectAndScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceGroupNames []string `protobuf:"bytes,1,rep,name=resource_group_names,json=resourceGroupNames,proto3" json:"resource_group_names,omitempty"`
}

func (x *CollectAndScanRequest) Reset() {
	*x = CollectAndScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectAndScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectAndScanRequest) ProtoMessage() {}

func (x *CollectAndScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectAndScanRequest.ProtoReflect.Descriptor instead.
func (*CollectAndScanRequest) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{21}
}

func (x *CollectAndScanRequest) GetResourceGroupNames() []string {
	if x != nil {
		return x.ResourceGroupNames
	}
	return nil
}

type CollectAndScanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectId string `protobuf:"bytes,1,opt,name=collect_id,json=collectId,proto3" json:"collect_id,omitempty"`
	ScanId    string `protobuf:"bytes,2,opt,name=scan_id,json=scanId,proto3" json:"scan_id,omitempty"`
}

func (x *CollectAndScanResponse) Reset() {
	*x = CollectAndScanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectAndScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectAndScanResponse) ProtoMessage() {}

func (x *CollectAndScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectAndScanResponse.ProtoReflect.Descriptor instead.
func (*CollectAndScanResponse) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{22}
}

func (x *CollectAndScanResponse) GetCollectId() string {
	if x != nil {
		return x.CollectId
	}
	return ""
}

func (x *CollectAndScanResponse) GetScanId() string {
	if x != nil {
		return x.ScanId
	}
	return ""
}

type ListObservationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageToken          string   `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize           int32    `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	ResourceGroupNames []string `protobuf:"bytes,3,rep,name=resource_group_names,json=resourceGroupNames,proto3" json:"resource_group_names,omitempty"`
}

func (x *ListObservationsRequest) Reset() {
	*x = ListObservationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListObservationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListObservationsRequest) ProtoMessage() {}

func (x *ListObservationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListObservationsRequest.ProtoReflect.Descriptor instead.
func (*ListObservationsRequest) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{23}
}

func (x *ListObservationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListObservationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListObservationsRequest) GetResourceGroupNames() []string {
	if x != nil {
		return x.ResourceGroupNames
	}
	return nil
}

type CreateObservationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Observation *Observation `protobuf:"bytes,1,opt,name=observation,proto3" json:"observation,omitempty"`
}

func (x *CreateObservationRequest) Reset() {
	*x = CreateObservationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateObservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateObservationRequest) ProtoMessage() {}

func (x *CreateObservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateObservationRequest.ProtoReflect.Descriptor instead.
func (*CreateObservationRequest) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{24}
}

func (x *CreateObservationRequest) GetObservation() *Observation {
	if x != nil {
		return x.Observation
	}
	return nil
}

// we use this pair to get information about the rules that have no observations
type RuleObservationPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule         string         `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	Observations []*Observation `protobuf:"bytes,2,rep,name=observations,proto3" json:"observations,omitempty"`
}

func (x *RuleObservationPair) Reset() {
	*x = RuleObservationPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleObservationPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleObservationPair) ProtoMessage() {}

func (x *RuleObservationPair) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleObservationPair.ProtoReflect.Descriptor instead.
func (*RuleObservationPair) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{25}
}

func (x *RuleObservationPair) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *RuleObservationPair) GetObservations() []*Observation {
	if x != nil {
		return x.Observations
	}
	return nil
}

// we use this pair to get information about the resource groups that have no
// observations
type ResourceGroupObservationsPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceGroupName string                 `protobuf:"bytes,1,opt,name=resource_group_name,json=resourceGroupName,proto3" json:"resource_group_name,omitempty"`
	RulesObservations []*RuleObservationPair `protobuf:"bytes,2,rep,name=rules_observations,json=rulesObservations,proto3" json:"rules_observations,omitempty"`
}

func (x *ResourceGroupObservationsPair) Reset() {
	*x = ResourceGroupObservationsPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceGroupObservationsPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceGroupObservationsPair) ProtoMessage() {}

func (x *ResourceGroupObservationsPair) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceGroupObservationsPair.ProtoReflect.Descriptor instead.
func (*ResourceGroupObservationsPair) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{26}
}

func (x *ResourceGroupObservationsPair) GetResourceGroupName() string {
	if x != nil {
		return x.ResourceGroupName
	}
	return ""
}

func (x *ResourceGroupObservationsPair) GetRulesObservations() []*RuleObservationPair {
	if x != nil {
		return x.RulesObservations
	}
	return nil
}

type ListObservationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceGroupsObservations []*ResourceGroupObservationsPair `protobuf:"bytes,1,rep,name=resource_groups_observations,json=resourceGroupsObservations,proto3" json:"resource_groups_observations,omitempty"`
	NextPageToken              string                           `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListObservationsResponse) Reset() {
	*x = ListObservationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListObservationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListObservationsResponse) ProtoMessage() {}

func (x *ListObservationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListObservationsResponse.ProtoReflect.Descriptor instead.
func (*ListObservationsResponse) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{27}
}

func (x *ListObservationsResponse) GetResourceGroupsObservations() []*ResourceGroupObservationsPair {
	if x != nil {
		return x.ResourceGroupsObservations
	}
	return nil
}

func (x *ListObservationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type IamGroup_EntityKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *IamGroup_EntityKey) Reset() {
	*x = IamGroup_EntityKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamGroup_EntityKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamGroup_EntityKey) ProtoMessage() {}

func (x *IamGroup_EntityKey) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamGroup_EntityKey.ProtoReflect.Descriptor instead.
func (*IamGroup_EntityKey) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{5, 0}
}

func (x *IamGroup_EntityKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IamGroup_EntityKey) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type IamGroup_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      *IamGroup_EntityKey    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Role     IamGroup_Member_Role   `protobuf:"varint,2,opt,name=role,proto3,enum=IamGroup_Member_Role" json:"role,omitempty"`
	JoinDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=join_date,json=joinDate,proto3" json:"join_date,omitempty"`
	Type     IamGroup_Member_Type   `protobuf:"varint,4,opt,name=type,proto3,enum=IamGroup_Member_Type" json:"type,omitempty"`
}

func (x *IamGroup_Member) Reset() {
	*x = IamGroup_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamGroup_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamGroup_Member) ProtoMessage() {}

func (x *IamGroup_Member) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamGroup_Member.ProtoReflect.Descriptor instead.
func (*IamGroup_Member) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{5, 1}
}

func (x *IamGroup_Member) GetKey() *IamGroup_EntityKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *IamGroup_Member) GetRole() IamGroup_Member_Role {
	if x != nil {
		return x.Role
	}
	return IamGroup_Member_MEMBER_ROLE_UNKNOWN
}

func (x *IamGroup_Member) GetJoinDate() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinDate
	}
	return nil
}

func (x *IamGroup_Member) GetType() IamGroup_Member_Type {
	if x != nil {
		return x.Type
	}
	return IamGroup_Member_MEMBER_TYPE_UNKNOWN
}

type IamGroup_DynamicGroupMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query  []*IamGroup_DynamicGroupMetadata_Query `protobuf:"bytes,1,rep,name=query,proto3" json:"query,omitempty"`
	Status *IamGroup_DynamicGroupMetadata_Status  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *IamGroup_DynamicGroupMetadata) Reset() {
	*x = IamGroup_DynamicGroupMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamGroup_DynamicGroupMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamGroup_DynamicGroupMetadata) ProtoMessage() {}

func (x *IamGroup_DynamicGroupMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamGroup_DynamicGroupMetadata.ProtoReflect.Descriptor instead.
func (*IamGroup_DynamicGroupMetadata) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{5, 2}
}

func (x *IamGroup_DynamicGroupMetadata) GetQuery() []*IamGroup_DynamicGroupMetadata_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *IamGroup_DynamicGroupMetadata) GetStatus() *IamGroup_DynamicGroupMetadata_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type IamGroup_DynamicGroupMetadata_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query        string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	ResourceType string `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
}

func (x *IamGroup_DynamicGroupMetadata_Query) Reset() {
	*x = IamGroup_DynamicGroupMetadata_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamGroup_DynamicGroupMetadata_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamGroup_DynamicGroupMetadata_Query) ProtoMessage() {}

func (x *IamGroup_DynamicGroupMetadata_Query) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamGroup_DynamicGroupMetadata_Query.ProtoReflect.Descriptor instead.
func (*IamGroup_DynamicGroupMetadata_Query) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{5, 2, 0}
}

func (x *IamGroup_DynamicGroupMetadata_Query) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *IamGroup_DynamicGroupMetadata_Query) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

type IamGroup_DynamicGroupMetadata_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Time   string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *IamGroup_DynamicGroupMetadata_Status) Reset() {
	*x = IamGroup_DynamicGroupMetadata_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IamGroup_DynamicGroupMetadata_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IamGroup_DynamicGroupMetadata_Status) ProtoMessage() {}

func (x *IamGroup_DynamicGroupMetadata_Status) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IamGroup_DynamicGroupMetadata_Status.ProtoReflect.Descriptor instead.
func (*IamGroup_DynamicGroupMetadata_Status) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{5, 2, 1}
}

func (x *IamGroup_DynamicGroupMetadata_Status) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IamGroup_DynamicGroupMetadata_Status) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// Object retention policy.
type Bucket_RetentionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The duration for which objects in the bucket need to be retained.
	Period *durationpb.Duration `protobuf:"bytes,1,opt,name=period,proto3" json:"period,omitempty"`
	// If true, the policy cannot be modified.
	IsLocked bool `protobuf:"varint,2,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
}

func (x *Bucket_RetentionPolicy) Reset() {
	*x = Bucket_RetentionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bucket_RetentionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bucket_RetentionPolicy) ProtoMessage() {}

func (x *Bucket_RetentionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bucket_RetentionPolicy.ProtoReflect.Descriptor instead.
func (*Bucket_RetentionPolicy) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Bucket_RetentionPolicy) GetPeriod() *durationpb.Duration {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *Bucket_RetentionPolicy) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

// Server Side Encryption (SSE) policy.
type Bucket_EncryptionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, SSE is enabled for the bucket. Note that SSE is always enabled
	// in GCP.
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// If true, a Customer-Managed Key (CMK) is used to encrypt objects in the
	// bucket instead of a default key provided by a platform Key Management
	// Service (KMS).
	IsKeyCustomerManaged bool `protobuf:"varint,2,opt,name=is_key_customer_managed,json=isKeyCustomerManaged,proto3" json:"is_key_customer_managed,omitempty"`
}

func (x *Bucket_EncryptionPolicy) Reset() {
	*x = Bucket_EncryptionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_modron_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bucket_EncryptionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bucket_EncryptionPolicy) ProtoMessage() {}

func (x *Bucket_EncryptionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_modron_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bucket_EncryptionPolicy.ProtoReflect.Descriptor instead.
func (*Bucket_EncryptionPolicy) Descriptor() ([]byte, []int) {
	return file_modron_proto_rawDescGZIP(), []int{6, 1}
}

func (x *Bucket_EncryptionPolicy) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *Bucket_EncryptionPolicy) GetIsKeyCustomerManaged() bool {
	if x != nil {
		return x.IsKeyCustomerManaged
	}
	return false
}

var File_modron_proto protoreflect.FileDescriptor

var file_modron_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x72, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x01,
	0x0a, 0x13, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x64, 0x0a, 0x0a, 0x56, 0x6d, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x5b, 0x0a, 0x07,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x67, 0x63, 0x70,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x18, 0x67, 0x63, 0x70, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x56, 0x34, 0x22, 0xe2, 0x01, 0x0a, 0x11, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x1a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf7,
	0x08, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x42,
	0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x41, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x25, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x22, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x22, 0x76, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e,
	0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45,
	0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x10, 0x03, 0x22, 0x67, 0x0a, 0x13, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x15, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41,
	0x43, 0x4b, 0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x10,
	0x02, 0x22, 0x63, 0x0a, 0x0e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x57, 0x45, 0x41, 0x4b, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41,
	0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x53, 0x54,
	0x52, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x22, 0x73, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x1b,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x02, 0x22, 0x5b, 0x0a, 0x10, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x48, 0x41, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x4e, 0x4f, 0x5f, 0x48, 0x41, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x41,
	0x5f, 0x5a, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x41, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x5f,
	0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x04, 0x22, 0xd8, 0x09, 0x0a, 0x08, 0x49, 0x61, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x49, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x16, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x49, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x14, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x1a, 0x39, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0xcc, 0x03, 0x0a, 0x06,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x49, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x49, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa2, 0x01, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52,
	0x45, 0x44, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x05, 0x22, 0x67, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x03, 0x1a, 0x8b, 0x02, 0x0a, 0x14, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x49, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x49, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x42,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0x34, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xe0, 0x05, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3f,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x47, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x01, 0x52,
	0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0x61, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x1a, 0x68, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x4b,
	0x65, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x22, 0x39, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x02, 0x22, 0x4d, 0x0a, 0x11,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x4e, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x49, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x02, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x20, 0x0a, 0x06, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x22, 0x61, 0x0a, 0x09, 0x49, 0x61,
	0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2d,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd8, 0x03,
	0x0a, 0x09, 0x53, 0x73, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x53, 0x73, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3e,
	0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x54, 0x6c, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x53, 0x73, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x4d, 0x69, 0x6e, 0x54, 0x6c, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x6d, 0x69, 0x6e, 0x54, 0x6c, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0x5e, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x54, 0x6c, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x69, 0x6e, 0x54, 0x6c, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x54, 0x4c, 0x53, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x4c, 0x53,
	0x5f, 0x31, 0x5f, 0x31, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x4c, 0x53, 0x5f, 0x31, 0x5f,
	0x32, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x4c, 0x53, 0x5f, 0x31, 0x5f, 0x33, 0x10, 0x04,
	0x22, 0x56, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x04, 0x22, 0x59, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x14, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x13,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x22, 0x51, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xc8, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x73, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x73, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x09, 0x73, 0x73, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x34, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10,
	0x02, 0x22, 0xc4, 0x03, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x6d, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x65, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x2e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x10, 0x02, 0x22, 0x99, 0x07, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x69,
	0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x09, 0x69, 0x61, 0x6d,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x0b, 0x76, 0x6d, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x56, 0x6d,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x6d, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x43, 0x0a, 0x12,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x49, 0x0a, 0x14,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x48, 0x00, 0x52, 0x13, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x41, 0x50, 0x49, 0x4b, 0x65,
	0x79, 0x48, 0x00, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x06, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x30,
	0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x6d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x49, 0x61, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdd, 0x02,
	0x0a, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d,
	0x0a, 0x0e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a,
	0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a,
	0x0f, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a,
	0x0b, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x58,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6e,
	0x64, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x63, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0x4a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x13, 0x52,
	0x75, 0x6c, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x11, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xa4, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x1c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2a, 0x57, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x32,
	0xb7, 0x02, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x72, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x41, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x64, 0x53,
	0x63, 0x61, 0x6e, 0x12, 0x16, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x64,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41,
	0x6e, 0x64, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_modron_proto_rawDescOnce sync.Once
	file_modron_proto_rawDescData = file_modron_proto_rawDesc
)

func file_modron_proto_rawDescGZIP() []byte {
	file_modron_proto_rawDescOnce.Do(func() {
		file_modron_proto_rawDescData = protoimpl.X.CompressGZIP(file_modron_proto_rawDescData)
	})
	return file_modron_proto_rawDescData
}

var file_modron_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_modron_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_modron_proto_goTypes = []interface{}{
	(RequestStatus)(0),                           // 0: RequestStatus
	(Database_EncryptionType)(0),                 // 1: Database.EncryptionType
	(Database_BackupConfiguration)(0),            // 2: Database.BackupConfiguration
	(Database_PasswordPolicy)(0),                 // 3: Database.PasswordPolicy
	(Database_AuthorizedNetworks)(0),             // 4: Database.AuthorizedNetworks
	(Database_AvailabilityType)(0),               // 5: Database.AvailabilityType
	(IamGroup_Member_Type)(0),                    // 6: IamGroup.Member.Type
	(IamGroup_Member_Role)(0),                    // 7: IamGroup.Member.Role
	(Bucket_AccessType)(0),                       // 8: Bucket.AccessType
	(Bucket_AccessControlType)(0),                // 9: Bucket.AccessControlType
	(SslPolicy_MinTlsVersion)(0),                 // 10: SslPolicy.MinTlsVersion
	(SslPolicy_Profile)(0),                       // 11: SslPolicy.Profile
	(LoadBalancer_Type)(0),                       // 12: LoadBalancer.Type
	(Certificate_Type)(0),                        // 13: Certificate.Type
	(*ExportedCredentials)(nil),                  // 14: ExportedCredentials
	(*VmInstance)(nil),                           // 15: VmInstance
	(*Network)(nil),                              // 16: Network
	(*KubernetesCluster)(nil),                    // 17: KubernetesCluster
	(*Database)(nil),                             // 18: Database
	(*IamGroup)(nil),                             // 19: IamGroup
	(*Bucket)(nil),                               // 20: Bucket
	(*APIKey)(nil),                               // 21: APIKey
	(*Permission)(nil),                           // 22: Permission
	(*IamPolicy)(nil),                            // 23: IamPolicy
	(*SslPolicy)(nil),                            // 24: SslPolicy
	(*ServiceAccount)(nil),                       // 25: ServiceAccount
	(*ResourceGroup)(nil),                        // 26: ResourceGroup
	(*LoadBalancer)(nil),                         // 27: LoadBalancer
	(*Certificate)(nil),                          // 28: Certificate
	(*Resource)(nil),                             // 29: Resource
	(*Remediation)(nil),                          // 30: Remediation
	(*Observation)(nil),                          // 31: Observation
	(*ScanResultsList)(nil),                      // 32: ScanResultsList
	(*GetStatusCollectAndScanResponse)(nil),      // 33: GetStatusCollectAndScanResponse
	(*GetStatusCollectAndScanRequest)(nil),       // 34: GetStatusCollectAndScanRequest
	(*CollectAndScanRequest)(nil),                // 35: CollectAndScanRequest
	(*CollectAndScanResponse)(nil),               // 36: CollectAndScanResponse
	(*ListObservationsRequest)(nil),              // 37: ListObservationsRequest
	(*CreateObservationRequest)(nil),             // 38: CreateObservationRequest
	(*RuleObservationPair)(nil),                  // 39: RuleObservationPair
	(*ResourceGroupObservationsPair)(nil),        // 40: ResourceGroupObservationsPair
	(*ListObservationsResponse)(nil),             // 41: ListObservationsResponse
	(*IamGroup_EntityKey)(nil),                   // 42: IamGroup.EntityKey
	(*IamGroup_Member)(nil),                      // 43: IamGroup.Member
	(*IamGroup_DynamicGroupMetadata)(nil),        // 44: IamGroup.DynamicGroupMetadata
	(*IamGroup_DynamicGroupMetadata_Query)(nil),  // 45: IamGroup.DynamicGroupMetadata.Query
	(*IamGroup_DynamicGroupMetadata_Status)(nil), // 46: IamGroup.DynamicGroupMetadata.Status
	(*Bucket_RetentionPolicy)(nil),               // 47: Bucket.RetentionPolicy
	(*Bucket_EncryptionPolicy)(nil),              // 48: Bucket.EncryptionPolicy
	(*timestamppb.Timestamp)(nil),                // 49: google.protobuf.Timestamp
	(*structpb.Value)(nil),                       // 50: google.protobuf.Value
	(*durationpb.Duration)(nil),                  // 51: google.protobuf.Duration
}
var file_modron_proto_depIdxs = []int32{
	49, // 0: ExportedCredentials.creation_date:type_name -> google.protobuf.Timestamp
	49, // 1: ExportedCredentials.expiration_date:type_name -> google.protobuf.Timestamp
	49, // 2: ExportedCredentials.last_usage:type_name -> google.protobuf.Timestamp
	1,  // 3: Database.encryption:type_name -> Database.EncryptionType
	2,  // 4: Database.backup_config:type_name -> Database.BackupConfiguration
	3,  // 5: Database.password_policy:type_name -> Database.PasswordPolicy
	4,  // 6: Database.authorized_networks_setting_available:type_name -> Database.AuthorizedNetworks
	5,  // 7: Database.availability_type:type_name -> Database.AvailabilityType
	42, // 8: IamGroup.key:type_name -> IamGroup.EntityKey
	49, // 9: IamGroup.creation_date:type_name -> google.protobuf.Timestamp
	49, // 10: IamGroup.update_date:type_name -> google.protobuf.Timestamp
	43, // 11: IamGroup.member:type_name -> IamGroup.Member
	44, // 12: IamGroup.dynamic_group_metadata:type_name -> IamGroup.DynamicGroupMetadata
	49, // 13: Bucket.creation_date:type_name -> google.protobuf.Timestamp
	47, // 14: Bucket.retention_policy:type_name -> Bucket.RetentionPolicy
	48, // 15: Bucket.encryption_policy:type_name -> Bucket.EncryptionPolicy
	8,  // 16: Bucket.access_type:type_name -> Bucket.AccessType
	9,  // 17: Bucket.access_control_type:type_name -> Bucket.AccessControlType
	29, // 18: IamPolicy.resource:type_name -> Resource
	22, // 19: IamPolicy.permissions:type_name -> Permission
	49, // 20: SslPolicy.creation_date:type_name -> google.protobuf.Timestamp
	11, // 21: SslPolicy.profile:type_name -> SslPolicy.Profile
	10, // 22: SslPolicy.minTlsVersion:type_name -> SslPolicy.MinTlsVersion
	14, // 23: ServiceAccount.exported_credentials:type_name -> ExportedCredentials
	12, // 24: LoadBalancer.type:type_name -> LoadBalancer.Type
	28, // 25: LoadBalancer.certificates:type_name -> Certificate
	24, // 26: LoadBalancer.sslPolicy:type_name -> SslPolicy
	13, // 27: Certificate.type:type_name -> Certificate.Type
	49, // 28: Certificate.creation_date:type_name -> google.protobuf.Timestamp
	49, // 29: Certificate.expiration_date:type_name -> google.protobuf.Timestamp
	49, // 30: Resource.timestamp:type_name -> google.protobuf.Timestamp
	23, // 31: Resource.iam_policy:type_name -> IamPolicy
	15, // 32: Resource.vm_instance:type_name -> VmInstance
	16, // 33: Resource.network:type_name -> Network
	17, // 34: Resource.kubernetes_cluster:type_name -> KubernetesCluster
	25, // 35: Resource.service_account:type_name -> ServiceAccount
	27, // 36: Resource.load_balancer:type_name -> LoadBalancer
	26, // 37: Resource.resource_group:type_name -> ResourceGroup
	14, // 38: Resource.exported_credentials:type_name -> ExportedCredentials
	21, // 39: Resource.api_key:type_name -> APIKey
	20, // 40: Resource.bucket:type_name -> Bucket
	28, // 41: Resource.certificate:type_name -> Certificate
	18, // 42: Resource.database:type_name -> Database
	19, // 43: Resource.group:type_name -> IamGroup
	49, // 44: Observation.timestamp:type_name -> google.protobuf.Timestamp
	29, // 45: Observation.resource:type_name -> Resource
	50, // 46: Observation.expected_value:type_name -> google.protobuf.Value
	50, // 47: Observation.observed_value:type_name -> google.protobuf.Value
	30, // 48: Observation.remediation:type_name -> Remediation
	31, // 49: ScanResultsList.observations:type_name -> Observation
	0,  // 50: GetStatusCollectAndScanResponse.collect_status:type_name -> RequestStatus
	0,  // 51: GetStatusCollectAndScanResponse.scan_status:type_name -> RequestStatus
	31, // 52: CreateObservationRequest.observation:type_name -> Observation
	31, // 53: RuleObservationPair.observations:type_name -> Observation
	39, // 54: ResourceGroupObservationsPair.rules_observations:type_name -> RuleObservationPair
	40, // 55: ListObservationsResponse.resource_groups_observations:type_name -> ResourceGroupObservationsPair
	42, // 56: IamGroup.Member.key:type_name -> IamGroup.EntityKey
	7,  // 57: IamGroup.Member.role:type_name -> IamGroup.Member.Role
	49, // 58: IamGroup.Member.join_date:type_name -> google.protobuf.Timestamp
	6,  // 59: IamGroup.Member.type:type_name -> IamGroup.Member.Type
	45, // 60: IamGroup.DynamicGroupMetadata.query:type_name -> IamGroup.DynamicGroupMetadata.Query
	46, // 61: IamGroup.DynamicGroupMetadata.status:type_name -> IamGroup.DynamicGroupMetadata.Status
	51, // 62: Bucket.RetentionPolicy.period:type_name -> google.protobuf.Duration
	35, // 63: ModronService.CollectAndScan:input_type -> CollectAndScanRequest
	37, // 64: ModronService.ListObservations:input_type -> ListObservationsRequest
	38, // 65: ModronService.CreateObservation:input_type -> CreateObservationRequest
	34, // 66: ModronService.GetStatusCollectAndScan:input_type -> GetStatusCollectAndScanRequest
	36, // 67: ModronService.CollectAndScan:output_type -> CollectAndScanResponse
	41, // 68: ModronService.ListObservations:output_type -> ListObservationsResponse
	31, // 69: ModronService.CreateObservation:output_type -> Observation
	33, // 70: ModronService.GetStatusCollectAndScan:output_type -> GetStatusCollectAndScanResponse
	67, // [67:71] is the sub-list for method output_type
	63, // [63:67] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_modron_proto_init() }
func file_modron_proto_init() {
	if File_modron_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_modron_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportedCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Database); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SslPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Remediation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanResultsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusCollectAndScanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusCollectAndScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectAndScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectAndScanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListObservationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateObservationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleObservationPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceGroupObservationsPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListObservationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamGroup_EntityKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamGroup_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamGroup_DynamicGroupMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamGroup_DynamicGroupMetadata_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IamGroup_DynamicGroupMetadata_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bucket_RetentionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_modron_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bucket_EncryptionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_modron_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_modron_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_modron_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Resource_VmInstance)(nil),
		(*Resource_Network)(nil),
		(*Resource_KubernetesCluster)(nil),
		(*Resource_ServiceAccount)(nil),
		(*Resource_LoadBalancer)(nil),
		(*Resource_ResourceGroup)(nil),
		(*Resource_ExportedCredentials)(nil),
		(*Resource_ApiKey)(nil),
		(*Resource_Bucket)(nil),
		(*Resource_Certificate)(nil),
		(*Resource_Database)(nil),
		(*Resource_Group)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_modron_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_modron_proto_goTypes,
		DependencyIndexes: file_modron_proto_depIdxs,
		EnumInfos:         file_modron_proto_enumTypes,
		MessageInfos:      file_modron_proto_msgTypes,
	}.Build()
	File_modron_proto = out.File
	file_modron_proto_rawDesc = nil
	file_modron_proto_goTypes = nil
	file_modron_proto_depIdxs = nil
}
