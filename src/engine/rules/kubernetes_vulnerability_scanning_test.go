package rules

import (
	"testing"
	"time"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/structpb"
	"google.golang.org/protobuf/types/known/timestamppb"

	"github.com/nianticlabs/modron/src/model"
	pb "github.com/nianticlabs/modron/src/proto/generated"
	"github.com/nianticlabs/modron/src/utils"
)

var k8sVulnScanningCluster = &pb.Resource{
	Uid:               "my-uuid",
	CollectionUid:     "scan-id",
	Timestamp:         timestamppb.New(time.Unix(0, 0)),
	DisplayName:       "KubernetesCluster",
	Link:              "",
	Name:              "my-cluster",
	Parent:            "projects/my-project-id",
	ResourceGroupName: "projects/my-project-id",
	IamPolicy:         nil,
	Type: &pb.Resource_KubernetesCluster{
		KubernetesCluster: &pb.KubernetesCluster{
			MasterAuthorizedNetworks: []string{
				"1.1.1.1/32",
				"100.100.0.5/32",
			},
			PrivateCluster: false,
			MasterVersion:  "1.28.9-gke.1209000",
			NodesVersion:   "1.28.9-gke.1209000",
			Location:       "us-central1-b",
			Security: &pb.KubernetesCluster_Security{
				VulnerabilityScanning: pb.KubernetesCluster_Security_VULN_SCAN_DISABLED,
			},
		},
	},
}

func TestKubernetesCluster_VulnerabilityScanningDisabled(t *testing.T) {
	rsrc := proto.Clone(k8sVulnScanningCluster).(*pb.Resource)
	rsrc.GetKubernetesCluster().Security.VulnerabilityScanning = pb.KubernetesCluster_Security_VULN_SCAN_DISABLED

	want := []*pb.Observation{
		{
			ScanUid:     proto.String("unit-test-scan"),
			ResourceRef: utils.GetResourceRef(rsrc),
			Name:        "KUBERNETES_VULNERABILITY_SCANNING_DISABLED",
			Remediation: &pb.Remediation{
				Description:    "Vulnerability scanning is disabled for this cluster",
				Recommendation: "Enable the vulnerability scanning for this cluster by following the [Enable advanced vulnerability insights](https://cloud.google.com/kubernetes-engine/docs/how-to/security-posture-vulnerability-scanning#enable-advanced-insights) section of the GKE docs.\n\n```gcloud container clusters update \"my-cluster\" --project=\"my-project-id\" --location=\"us-central1-b\" --workload-vulnerability-scanning=standard```",
			},
			ExpectedValue: structpb.NewStringValue("basic"),
			ObservedValue: structpb.NewStringValue("VULN_SCAN_DISABLED"),
			Severity:      pb.Severity_SEVERITY_HIGH,
		},
	}
	TestRuleRun(t, []*pb.Resource{rsrc}, []model.Rule{NewKubernetesVulnerabilityScanningDisabledRule()}, want)
}

func TestKubernetesCluster_VulnerabilityScanningUnknown(t *testing.T) {
	rsrc := proto.Clone(k8sVulnScanningCluster).(*pb.Resource)
	rsrc.GetKubernetesCluster().Security.VulnerabilityScanning = pb.KubernetesCluster_Security_VULN_SCAN_UNKNOWN

	want := []*pb.Observation{
		{
			ScanUid:     proto.String("unit-test-scan"),
			ResourceRef: utils.GetResourceRef(rsrc),
			Name:        "KUBERNETES_VULNERABILITY_SCANNING_DISABLED",
			Remediation: &pb.Remediation{
				Description:    "Vulnerability scanning is disabled for this cluster",
				Recommendation: "Enable the vulnerability scanning for this cluster by following the [Enable advanced vulnerability insights](https://cloud.google.com/kubernetes-engine/docs/how-to/security-posture-vulnerability-scanning#enable-advanced-insights) section of the GKE docs.\n\n```gcloud container clusters update \"my-cluster\" --project=\"my-project-id\" --location=\"us-central1-b\" --workload-vulnerability-scanning=standard```",
			},
			ExpectedValue: structpb.NewStringValue("basic"),
			ObservedValue: structpb.NewStringValue("VULN_SCAN_UNKNOWN"),
			Severity:      pb.Severity_SEVERITY_HIGH,
		},
	}
	TestRuleRun(t, []*pb.Resource{rsrc}, []model.Rule{NewKubernetesVulnerabilityScanningDisabledRule()}, want)
}

func TestKubernetesCluster_VulnerabilityScanningBasic(t *testing.T) {
	rsrc := proto.Clone(k8sVulnScanningCluster).(*pb.Resource)
	rsrc.GetKubernetesCluster().Security.VulnerabilityScanning = pb.KubernetesCluster_Security_VULN_SCAN_BASIC
	TestRuleRun(t, []*pb.Resource{rsrc}, []model.Rule{NewKubernetesVulnerabilityScanningDisabledRule()}, nil)
}
