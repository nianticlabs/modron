package rules

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/structpb"
	"google.golang.org/protobuf/types/known/timestamppb"

	"github.com/nianticlabs/modron/src/model"
	pb "github.com/nianticlabs/modron/src/proto/generated"
	"github.com/nianticlabs/modron/src/utils"
)

func init() {
	AddRule(NewKubernetesVulnerabilityScanningDisabledRule())
}

const KubernetesVulnerabilityScanningDisabledRuleName = "KUBERNETES_VULNERABILITY_SCANNING_DISABLED"

type KubernetesVulnerabilityScanningDisabled struct {
}

func (k KubernetesVulnerabilityScanningDisabled) Check(_ context.Context, _ model.Engine, rsrc *pb.Resource) (obs []*pb.Observation, errs []error) {
	k8s := rsrc.GetKubernetesCluster()
	if k8s.Security == nil {
		errs = append(errs, fmt.Errorf("no security configuration provided for the cluster"))
		return
	}
	switch k8s.Security.VulnerabilityScanning {
	case pb.KubernetesCluster_Security_VULN_SCAN_DISABLED, pb.KubernetesCluster_Security_VULN_SCAN_UNKNOWN:
		obs = append(obs, &pb.Observation{
			Uid:         uuid.NewString(),
			Timestamp:   timestamppb.Now(),
			Name:        k.Info().Name,
			ResourceRef: utils.GetResourceRef(rsrc),
			Remediation: &pb.Remediation{
				Description:    "Vulnerability scanning is disabled for this cluster",
				Recommendation: "Enable the vulnerability scanning for this cluster by following the [Enable advanced vulnerability insights](https://cloud.google.com/kubernetes-engine/docs/how-to/security-posture-vulnerability-scanning#enable-advanced-insights) section of the GKE docs.\n\n" + enableGkeVulnScanCmd(rsrc),
			},
			ExpectedValue: structpb.NewStringValue("basic"),
			ObservedValue: structpb.NewStringValue(k8s.Security.VulnerabilityScanning.String()),
			Severity:      pb.Severity_SEVERITY_HIGH,
		})
	case pb.KubernetesCluster_Security_VULN_SCAN_BASIC, pb.KubernetesCluster_Security_VULN_SCAN_ADVANCED:
		// All good
	default:
		errs = append(errs, fmt.Errorf("unknown vulnerability scanning type: %s", k8s.Security.VulnerabilityScanning))
	}
	return
}

func enableGkeVulnScanCmd(k8sRsrc *pb.Resource) string {
	return fmt.Sprintf(
		"```gcloud container clusters update %q --project=%q --location=%q --workload-vulnerability-scanning=standard```",
		k8sRsrc.Name,
		utils.StripProjectsPrefix(k8sRsrc.ResourceGroupName),
		k8sRsrc.GetKubernetesCluster().Location,
	)
}

func (k KubernetesVulnerabilityScanningDisabled) Info() *model.RuleInfo {
	return &model.RuleInfo{
		Name: KubernetesVulnerabilityScanningDisabledRuleName,
		AcceptedResourceTypes: []proto.Message{
			&pb.KubernetesCluster{},
		},
	}
}

func NewKubernetesVulnerabilityScanningDisabledRule() model.Rule {
	return &KubernetesVulnerabilityScanningDisabled{}
}
