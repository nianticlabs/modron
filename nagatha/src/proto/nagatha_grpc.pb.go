// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NagathaClient is the client API for Nagatha service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NagathaClient interface {
	CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*Notification, error)
	GetException(ctx context.Context, in *GetExceptionRequest, opts ...grpc.CallOption) (*Exception, error)
	CreateException(ctx context.Context, in *CreateExceptionRequest, opts ...grpc.CallOption) (*Exception, error)
	UpdateException(ctx context.Context, in *UpdateExceptionRequest, opts ...grpc.CallOption) (*Exception, error)
	DeleteException(ctx context.Context, in *DeleteExceptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListExceptions(ctx context.Context, in *ListExceptionsRequest, opts ...grpc.CallOption) (*ListExceptionsResponse, error)
	NotifyUser(ctx context.Context, in *NotifyUserRequest, opts ...grpc.CallOption) (*NotifyUserResponse, error)
	NotifyAll(ctx context.Context, in *NotifyAllRequest, opts ...grpc.CallOption) (*NotifyAllResponse, error)
}

type nagathaClient struct {
	cc grpc.ClientConnInterface
}

func NewNagathaClient(cc grpc.ClientConnInterface) NagathaClient {
	return &nagathaClient{cc}
}

func (c *nagathaClient) CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*Notification, error) {
	out := new(Notification)
	err := c.cc.Invoke(ctx, "/Nagatha/CreateNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nagathaClient) GetException(ctx context.Context, in *GetExceptionRequest, opts ...grpc.CallOption) (*Exception, error) {
	out := new(Exception)
	err := c.cc.Invoke(ctx, "/Nagatha/GetException", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nagathaClient) CreateException(ctx context.Context, in *CreateExceptionRequest, opts ...grpc.CallOption) (*Exception, error) {
	out := new(Exception)
	err := c.cc.Invoke(ctx, "/Nagatha/CreateException", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nagathaClient) UpdateException(ctx context.Context, in *UpdateExceptionRequest, opts ...grpc.CallOption) (*Exception, error) {
	out := new(Exception)
	err := c.cc.Invoke(ctx, "/Nagatha/UpdateException", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nagathaClient) DeleteException(ctx context.Context, in *DeleteExceptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Nagatha/DeleteException", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nagathaClient) ListExceptions(ctx context.Context, in *ListExceptionsRequest, opts ...grpc.CallOption) (*ListExceptionsResponse, error) {
	out := new(ListExceptionsResponse)
	err := c.cc.Invoke(ctx, "/Nagatha/ListExceptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nagathaClient) NotifyUser(ctx context.Context, in *NotifyUserRequest, opts ...grpc.CallOption) (*NotifyUserResponse, error) {
	out := new(NotifyUserResponse)
	err := c.cc.Invoke(ctx, "/Nagatha/NotifyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nagathaClient) NotifyAll(ctx context.Context, in *NotifyAllRequest, opts ...grpc.CallOption) (*NotifyAllResponse, error) {
	out := new(NotifyAllResponse)
	err := c.cc.Invoke(ctx, "/Nagatha/NotifyAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NagathaServer is the server API for Nagatha service.
// All implementations must embed UnimplementedNagathaServer
// for forward compatibility
type NagathaServer interface {
	CreateNotification(context.Context, *CreateNotificationRequest) (*Notification, error)
	GetException(context.Context, *GetExceptionRequest) (*Exception, error)
	CreateException(context.Context, *CreateExceptionRequest) (*Exception, error)
	UpdateException(context.Context, *UpdateExceptionRequest) (*Exception, error)
	DeleteException(context.Context, *DeleteExceptionRequest) (*emptypb.Empty, error)
	ListExceptions(context.Context, *ListExceptionsRequest) (*ListExceptionsResponse, error)
	NotifyUser(context.Context, *NotifyUserRequest) (*NotifyUserResponse, error)
	NotifyAll(context.Context, *NotifyAllRequest) (*NotifyAllResponse, error)
	mustEmbedUnimplementedNagathaServer()
}

// UnimplementedNagathaServer must be embedded to have forward compatible implementations.
type UnimplementedNagathaServer struct {
}

func (UnimplementedNagathaServer) CreateNotification(context.Context, *CreateNotificationRequest) (*Notification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (UnimplementedNagathaServer) GetException(context.Context, *GetExceptionRequest) (*Exception, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetException not implemented")
}
func (UnimplementedNagathaServer) CreateException(context.Context, *CreateExceptionRequest) (*Exception, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateException not implemented")
}
func (UnimplementedNagathaServer) UpdateException(context.Context, *UpdateExceptionRequest) (*Exception, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateException not implemented")
}
func (UnimplementedNagathaServer) DeleteException(context.Context, *DeleteExceptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteException not implemented")
}
func (UnimplementedNagathaServer) ListExceptions(context.Context, *ListExceptionsRequest) (*ListExceptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExceptions not implemented")
}
func (UnimplementedNagathaServer) NotifyUser(context.Context, *NotifyUserRequest) (*NotifyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyUser not implemented")
}
func (UnimplementedNagathaServer) NotifyAll(context.Context, *NotifyAllRequest) (*NotifyAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyAll not implemented")
}
func (UnimplementedNagathaServer) mustEmbedUnimplementedNagathaServer() {}

// UnsafeNagathaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NagathaServer will
// result in compilation errors.
type UnsafeNagathaServer interface {
	mustEmbedUnimplementedNagathaServer()
}

func RegisterNagathaServer(s grpc.ServiceRegistrar, srv NagathaServer) {
	s.RegisterService(&Nagatha_ServiceDesc, srv)
}

func _Nagatha_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NagathaServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Nagatha/CreateNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NagathaServer).CreateNotification(ctx, req.(*CreateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nagatha_GetException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExceptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NagathaServer).GetException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Nagatha/GetException",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NagathaServer).GetException(ctx, req.(*GetExceptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nagatha_CreateException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExceptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NagathaServer).CreateException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Nagatha/CreateException",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NagathaServer).CreateException(ctx, req.(*CreateExceptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nagatha_UpdateException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExceptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NagathaServer).UpdateException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Nagatha/UpdateException",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NagathaServer).UpdateException(ctx, req.(*UpdateExceptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nagatha_DeleteException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExceptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NagathaServer).DeleteException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Nagatha/DeleteException",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NagathaServer).DeleteException(ctx, req.(*DeleteExceptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nagatha_ListExceptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExceptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NagathaServer).ListExceptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Nagatha/ListExceptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NagathaServer).ListExceptions(ctx, req.(*ListExceptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nagatha_NotifyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NagathaServer).NotifyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Nagatha/NotifyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NagathaServer).NotifyUser(ctx, req.(*NotifyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nagatha_NotifyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NagathaServer).NotifyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Nagatha/NotifyAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NagathaServer).NotifyAll(ctx, req.(*NotifyAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nagatha_ServiceDesc is the grpc.ServiceDesc for Nagatha service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nagatha_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Nagatha",
	HandlerType: (*NagathaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotification",
			Handler:    _Nagatha_CreateNotification_Handler,
		},
		{
			MethodName: "GetException",
			Handler:    _Nagatha_GetException_Handler,
		},
		{
			MethodName: "CreateException",
			Handler:    _Nagatha_CreateException_Handler,
		},
		{
			MethodName: "UpdateException",
			Handler:    _Nagatha_UpdateException_Handler,
		},
		{
			MethodName: "DeleteException",
			Handler:    _Nagatha_DeleteException_Handler,
		},
		{
			MethodName: "ListExceptions",
			Handler:    _Nagatha_ListExceptions_Handler,
		},
		{
			MethodName: "NotifyUser",
			Handler:    _Nagatha_NotifyUser_Handler,
		},
		{
			MethodName: "NotifyAll",
			Handler:    _Nagatha_NotifyAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nagatha.proto",
}
